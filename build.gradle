import org.gradle.util.CollectionUtils

apply plugin: 'java'
apply plugin: 'maven-publish'
//apply plugin: 'org.asciidoctor.gradle.asciidoctor'
//apply plugin: 'com.github.jruby-gradle.base'

project.ext["jqaversion"] = "2.1.0"
project.group = 'de.kontext-e.jqassistant.plugin'
project.version = '1.12.0'

buildscript {
    repositories {
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        //classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        //classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.11'
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:4.8.0"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: "jacoco"
    apply plugin: 'pmd'
    //apply plugin: 'org.asciidoctor.gradle.asciidoctor'
    //apply plugin: 'com.github.jruby-gradle.base'

    project.version = project.parent.version

    check.finalizedBy jacocoTestReport

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        mavenLocal()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                afterEvaluate {
                    artifactId = project.group.replace('de.kontext-e.', '') + '.' + artifactId
                }
            }
        }
        repositories {
            mavenCentral()
            mavenLocal()
        }
    }

    dependencies {

        implementation 'com.buschmais.jqassistant.core:scanner:' + project.jqaversion
        implementation 'com.buschmais.jqassistant.core:report:' + project.jqaversion
        implementation 'com.buschmais.jqassistant.plugin:common:' + project.jqaversion
        implementation ('com.buschmais.jqassistant.core:store:' + project.jqaversion)

        testImplementation 'com.buschmais.jqassistant.core:test:' + project.jqaversion
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

        testImplementation 'org.slf4j:slf4j-simple:1.8.0-beta4'

        //gems 'rubygems:asciidoctor-diagram:1.2.1'
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        archiveClassifier = 'javadoc'
        from tasks.javadoc.destinationDir
    }

    tasks.register('sourcesJar', Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    artifacts {
        archives jar

        archives javadocJar
        archives sourcesJar
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc).configureEach {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        reports {
            xml
            csv
        }
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checks.xml')
        ignoreFailures = true
        showViolations = false
        toolVersion = '8.15'
    }

    spotbugs {
        ignoreFailures = true
        effort = "max"
        reportLevel = "medium"
        toolVersion = '3.1.9'
    }

    pmd {
        ruleSets = ["category/java/errorprone.xml", "category/java/multithreading.xml", "category/java/bestpractices.xml", "category/java/codestyle.xml", "category/java/design.xml", "category/java/security.xml"]
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        toolVersion = '6.10.0'
    }

//    install {
//        repositories.mavenInstaller {
//            pom.groupId = 'de.kontext-e.jqassistant.plugin'
//        }
//    }

}

repositories {
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    mavenCentral()
}

configurations {
    jqaRuntime {
        // newer gradle versions resolve ALL depencencies before build
        // so on version number changes this version needs to be set once
        // until new version is in local maven repo installed
        project.version = '1.11.0'
    }
}

dependencies {
    jqaRuntime("com.buschmais.jqassistant.core:report:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:common:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:java:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:junit:${project.jqaversion}")

    //jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.asciidoc:1.9.0")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.checkstyle:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.spotbugs:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.git:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.jacoco:${project.version}")
    //  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.javaparser:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.linecount:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plaintext:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plantuml:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.pmd:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.excel:${project.version}")
    //  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.cpp:${project.version}")
}

tasks.register('removeJQAReport', Delete) {
    delete 'jqassistant/report'
    delete 'jqassistant/store'
}

tasks.register('jqascan', JavaExec) {
    dependsOn 'removeJQAReport'
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'scan'
    args '-p'
    args 'jqassistant/jqassistant.properties'
    args '-f'

    rootProject.subprojects {
        args 'java:classpath::' + it.name + '/build/classes/java/main'
        args 'java:classpath::' + it.name + '/build/classes/java/test'
        args it.name + '/build/reports'
        args it.name + '/src/main'
        args it.name + '/src/test'
    }

    args '.git'
    args 'doc/architecture'

    args 'plantuml/src/test/asciidoc'
    args 'plantuml/src/test/plantuml'
    args 'asciidoc/src/test/asciidoc'
    args 'plaintext/src/test/testfiles'
    args 'javaparser/src/test'

    args 'excel/src/test/resources'
}

tasks.register('jqaanalyze', JavaExec) {
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'analyze'
    args '-r'
    args 'jqassistant/jqassistant-rules'
}

tasks.register('jqa') {
    dependsOn = ['jqascan', 'jqaanalyze']
    jqaanalyze.mustRunAfter jqascan
}

tasks.register('jqs', JavaExec) {
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'server'
    standardInput = System.in
}

tasks.register('install2jqa', Copy) {
    def jqahome = "$System.env.JQASSISTANT_HOME"
    println 'jqahome = ' + jqahome

    mkdir "$projectDir/install"
    into "$projectDir/install"
    from configurations.jqaRuntime
    exclude { details ->
        details.file.name.contains('asm-3.1')
    }
}
