import org.gradle.util.CollectionUtils

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.github.jruby-gradle.base'

project.ext["jqaversion"] = "2.1.0"
project.group = 'de.kontext-e.jqassistant.plugin'
project.version = '1.12.0'

buildscript {
  repositories {
    jcenter()
      maven {
          url "https://oss.sonatype.org/content/repositories/snapshots"
      }
      maven {
          url "https://plugins.gradle.org/m2/"
      }
  }

  dependencies {
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
    classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.11'
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.6"
  }
}

asciidoctor {
  dependsOn jrubyPrepareGems
  requires = ['asciidoctor-diagram']
  gemPath = jrubyPrepareGems.outputDir
  sourceDir = file('doc/architecture')

  resources {
    from('doc/architecture') {
      include '**/*.png'
    }
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: "jacoco"
    apply plugin: 'pmd'
    apply plugin: 'org.asciidoctor.gradle.asciidoctor'
    apply plugin: 'com.github.jruby-gradle.base'

    project.version = project.parent.version
    sourceCompatibility = 1.8

	check.finalizedBy jacocoTestReport

	repositories {
        mavenCentral()
        maven {
            url "http://oss.sonatype.org/content/repositories/snapshots"
        }
        mavenLocal()
    }

  dependencies {

//      compile "org.jqassistant.plugin:rules:2.1.0"
//      compile "com.buschmais.jqassistant:bom:${project.jqaversion}"
//      compile "com.buschmais.jqassistant:jqa-distribution-specification:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:analysis:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:report:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:rule:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:scanner:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:shared:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.core:store:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.plugin:common:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.plugin:java:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.plugin:json:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.plugin:xml:${project.jqaversion}"
//      compile "com.buschmais.jqassistant.plugin:yaml2:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.neo4j:embedded:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.core:store:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.core:analysis:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.core:test:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.plugin:common:${project.jqaversion}"
//      testCompile "com.buschmais.jqassistant.plugin:java:${project.jqaversion}"
//
//      compile "com.buschmais.xo:xo.neo4j.embedded:${xo.version}"
//      compile "com.buschmais.xo:xo.api:${xo.version}"
//      compile "com.buschmais.xo:xo.neo4j.api:${xo.version}"
//      compile "com.buschmais.xo:xo.impl:${xo.version}"
//      compile "com.buschmais.xo:xo.neo4j.remote:${xo.version}"
//      compile "com.buschmais.xo:xo.spi:${xo.version}"
//      compile "org.neo4j:neo4j:${neo4j.version}"
//      compile "org.neo4j.community:it-test-support:${neo4j.version}"
//      compile "org.neo4j.driver:neo4j-java-driver:${neo4j.neo4j-java-driver.version}"
//      compile "org.neo4j.client:neo4j-browser:${neo4j-browser.version}"
//      compile "javax.annotation:javax.annotation-api:${javax.annotation-api.version}"
//      compile "jakarta.annotation:jakarta.annotation-api:${jakarta.annotation-api.version}"
//      compile "javax.xml.bind:jaxb-api:${jaxb-api.version}"
//      compile "javax.validation:validation-api:${validation-api.version}"
//      compile "org.glassfish.jaxb:jaxb-runtime:${jaxb-runtime.version}"
//      compile "io.smallrye.config:smallrye-config-core:${smallrye-config.version}"
//      compile "io.smallrye.config:smallrye-config-source-yaml:${smallrye-config.version}"
//      compile "org.apache.maven.resolver:maven-resolver-impl:${maven-resolver.version}"
//      compile "org.apache.maven.resolver:maven-resolver-connector-basic:${maven-resolver.version}"
//      compile "org.apache.maven.resolver:maven-resolver-transport-file:${maven-resolver.version}"
//      compile "org.apache.maven.resolver:maven-resolver-transport-http:${maven-resolver.version}"
//      compile "org.apache.maven.resolver:maven-resolver-util:${maven-resolver.version}"
//      compile "org.slf4j:slf4j-api:${slf4j.version}"
//      compile "org.slf4j:jcl-over-slf4j:${slf4j.version}"
//      testCompile "org.slf4j:slf4j-simple:${slf4j.version}"
//      compile "commons-beanutils:commons-beanutils:${commons-beanutils.version}"
//      compile "commons-codec:commons-codec:${commons-codec.version}"
//      compile "commons-collections:commons-collections:${commons-collections.version}"
//      compile "commons-digester:commons-digester:${commons-digester.version}"
//      compile "commons-io:commons-io:${commons-io.version}"
//      compile "commons-lang:commons-lang:${commons-lang.version}"
//      compile "org.apache.commons:commons-lang3:${commons-lang3.version}"
//      compile "org.apache.commons:commons-text:${commons-text.version}"
//      compile "org.apache.httpcomponents:httpcore:${httpcore.version}"
//      compile "org.ow2.asm:asm:${asm.version}"
//      compile "org.ow2.asm:asm-util:${asm.version}"
//      compile "org.mapstruct:mapstruct:${mapstruct.version}"
//      compile "org.projectlombok:lombok:${lombok.version}"
//      compile "com.github.ben-manes.caffeine:caffeine:${caffeine.version}"
//      compile "com.google.guava:guava:${guava.version}"
//      compile "com.google.inject:guice:${guice.version}"
//      compile "com.fasterxml.jackson.core:jackson-annotations:${jackson.version}"
//      compile "com.fasterxml.jackson.core:jackson-core:${jackson.version}"
//      compile "com.fasterxml.jackson.core:jackson-databind:${jackson.version}"
//      compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson.version}"
//      compile "com.networknt:json-schema-validator:${json-schema-validator.version}"
//      compile "org.yaml:snakeyaml:${snakeyaml.version}"
//      compile "org.snakeyaml:snakeyaml-engine:${snakeyaml-engine.version}"
//      compile "org.junit:junit-bom:${junit.version}"
//      testCompile "org.junit-pioneer:junit-pioneer:${junit-pioneer.version}"
//      testCompile "org.assertj:assertj-core:${assertj.version}"
//      testCompile "org.awaitility:awaitility:4.2.0"
//      testCompile "org.hamcrest:java-hamcrest:${hamcrest.version}"
//      testCompile "org.mockito:mockito-junit-jupiter:${mockito.version}"

      //implementation 'org.jqassistant.plugin:parent:'+project.jqaversion
      implementation  'com.buschmais.jqassistant.core:scanner:'+project.jqaversion
      implementation  'com.buschmais.jqassistant.core:report:'+project.jqaversion
      implementation  'com.buschmais.jqassistant.plugin:common:'+project.jqaversion
      implementation  'com.buschmais.jqassistant.core:store:'+project.jqaversion
      implementation 'net.sourceforge.plantuml:plantuml:8059'

    testCompile  'com.buschmais.jqassistant.core:test:'+project.jqaversion
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

    testCompile  'org.slf4j:slf4j-simple:1.8.0-beta4'

    gems 'rubygems:asciidoctor-diagram:1.2.1'
  }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from tasks.javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }

    artifacts {
      archives jar

      archives javadocJar
      archives sourcesJar
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checks.xml')
        ignoreFailures = true
        showViolations = false
        toolVersion = '8.15'
    }

    spotbugs {
        ignoreFailures = true
        effort = "max"
        reportLevel = "medium"
        toolVersion = '3.1.9'
    }

    pmd {
        ruleSets = ["category/java/errorprone.xml", "category/java/multithreading.xml", "category/java/bestpractices.xml", "category/java/codestyle.xml","category/java/design.xml","category/java/security.xml"]
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        toolVersion = '6.10.0'
    }

    install {
        repositories.mavenInstaller {
            pom.groupId = 'de.kontext-e.jqassistant.plugin'
        }
    }

    asciidoctor {
        dependsOn jrubyPrepareGems
        requires = ['asciidoctor-diagram']
        gemPath = jrubyPrepareGems.outputDir
        sourceDir = file('src/main/asciidoc')

        resources {
            from('src/main/asciidoc') {
                include '**/*.png'
            }
        }
    }

}

repositories {
    mavenLocal()
    maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
    mavenCentral()
}

configurations {
	jqaRuntime {
        // newer gradle versions resolve ALL depencencies before build
        // so on version number changes this version needs to be set once
        // until new version is in local maven repo installed
        project.version = '1.11.0'
    }
}

dependencies {
    //jqaRuntime("com.buschmais.jqassistant.cli:jqassistant-commandline-distribution:${project.jqaversion}")
//    jqaRuntime("com.buschmais.jqassistant.cli:jqassistant-commandline-neo4jv3:${project.jqaversion}") {
//        exclude module: 'asm'
//    }
    jqaRuntime("com.buschmais.jqassistant.core:report:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:common:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:java:${project.jqaversion}")
    jqaRuntime("com.buschmais.jqassistant.plugin:junit:${project.jqaversion}")

    // jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.asciidoc:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.checkstyle:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.spotbugs:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.git:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.jacoco:${project.version}")
    //  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.javaparser:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.linecount:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plaintext:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.plantuml:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.pmd:${project.version}")
    jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.excel:${project.version}")
    //  jqaRuntime("de.kontext-e.jqassistant.plugin:jqassistant.plugin.cpp:${project.version}")

}

task removeJQAReport(type: Delete) {
  delete 'jqassistant/report'
  delete 'jqassistant/store'
}

task(jqascan, dependsOn: 'removeJQAReport', type: JavaExec) {
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'scan'
    args '-p'
    args 'jqassistant/jqassistant.properties'
    args '-f'

    rootProject.subprojects {
        args 'java:classpath::' + it.name + '/build/classes/java/main'
        args 'java:classpath::' + it.name + '/build/classes/java/test'
        args it.name + '/build/reports'
        args it.name + '/src/main'
        args it.name + '/src/test'
    }

    args '.git'
    args 'doc/architecture'

    args 'plantuml/src/test/asciidoc'
    args 'plantuml/src/test/plantuml'
    args 'asciidoc/src/test/asciidoc'
    args 'plaintext/src/test/testfiles'
    args 'javaparser/src/test'

    args 'excel/src/test/resources'
}

task(jqaanalyze, type: JavaExec) {
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'analyze'
    args '-r'
    args 'jqassistant/jqassistant-rules'
}

task(jqa, dependsOn: ['jqascan','jqaanalyze']) {
  jqaanalyze.mustRunAfter jqascan
}

task(jqs, type: JavaExec) {
    main = 'com.buschmais.jqassistant.commandline.Main'
    classpath = configurations.jqaRuntime

    // this is needed to work around a windows limitation
    // of a too long command path
    // see https://stackoverflow.com/questions/50707110/gradle-windows-java-io-ioexception-createprocess-error-206-filename-is-too-lon
    def cp = CollectionUtils.join(File.pathSeparator, classpath.getFiles())
    environment 'CLASSPATH', cp
    classpath = classpath.filter { false }

    args 'server'
    standardInput = System.in
}

task install2jqa(type: Copy) {
  def jqahome = "$System.env.JQASSISTANT_HOME"
  println 'jqahome = ' + jqahome;

  mkdir "$projectDir/install"
  into "$projectDir/install"
  from configurations.runtime
  exclude { details ->
    details.file.name.contains('asm-3.1')
  }
}
