<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.0">

    <constraint id="debug:rule" severity="critical">
        <requiresConcept refId="java:PackageDependency"/>
        <description>For debugging purposes</description>
        <cypher><![CDATA[
                match
                    (g:Plaintext:Line)
                return
                    g.lineNumber, g.text
        ]]></cypher>
    </constraint>

    <concept id="package:PackageLevel">
        <requiresConcept refId="java:PackageDependency"/>
        <description>Set the level property of a package, e.g. 1 for de, 2 for de.kontext_e and so on</description>
        <cypher><![CDATA[
			MATCH
				(p:Java:Package)
			WITH
				SPLIT(p.fqn,".") AS splitted, p
			SET
				p.level=SIZE(splitted)
			RETURN
				splitted, SIZE(splitted);
		]]></cypher>
    </concept>

    <concept id="dependency:TransitivePackageDependencies">
        <requiresConcept refId="package:PackageLevel"/>
        <requiresConcept refId="java:PackageDependency"/>
        <description>Add a DEPENDS_ON relationship to parents of a package P from other packages up to the same level of the source package.</description>
        <cypher><![CDATA[
            MATCH
                (p:Java:Package)-[:DEPENDS_ON]->(p2:Java:Package),
                (parent:Java:Package)-[:CONTAINS*]->(p2:Java:Package)
            WHERE
                p.level <= parent.level
            CREATE UNIQUE
                (p)-[:DEPENDS_ON]->(parent)
            RETURN
                p.fqn, parent.fqn;
        ]]></cypher>
    </concept>

    <constraint id="dependency:WrongDirection" severity="critical">
        <requiresConcept refId="java:PackageDependency"/>
        <requiresConcept refId="dependency:TransitivePackageDependencies"/>
        <description>Finds package dependencies which are in the wrong direction according to the documentation.</description>
        <cypher><![CDATA[
            MATCH
                (p1:PlantUml:Package)-[:MAY_DEPEND_ON]->(p2:PlantUml:Package),
                (p3:Java:Package)-[:DEPENDS_ON]->(p4:Java:Package)
            WHERE
                p1.fqn = p4.fqn
                AND p2.fqn = p3.fqn
            RETURN
                p3.fqn + "-->" + p4.fqn AS WrongDirection;
        ]]></cypher>
    </constraint>

	<concept id="visibility:PublicMethods">
		<description>Labels public methods with Public</description>
		<cypher><![CDATA[
			MATCH
				(m:Method)
			WHERE
				m.visibility='public'
			SET
				m:Public
			RETURN
				m.name;
        ]]></cypher>
	</concept>

    <constraint id="visibility:PublicMethodsOnlyCalledFromLocalPackage" severity="info">
        <requiresConcept refId="visibility:PublicMethods"/>
        <description>Finds methods declared public but only called from local package.</description>
        <cypher><![CDATA[
			MATCH
				(t1:Type)-[:DECLARES]->(m:Method),
				(t2:Type)-[:DECLARES]->(p:Method:Public),
				(package1:Package)-[:CONTAINS]->(t1),
				(package2:Package:Java)-[:CONTAINS]->(t2),
				(m)-[:INVOKES]->(p)
			WHERE
				package1.fqn <> package2.fqn
			WITH
				count(m) as calls, t2.fqn as typename, p.name as methodname
			WHERE
				calls = 0
			RETURN
				calls, typename, methodname;
        ]]></cypher>
    </constraint>

    <!-- make a concept out of this:
        match (l:Linecount), (g:Git:File) where g.relativePath =~ ('.*'+l.name) return distinct g.relativePath, l.linecount order by l.linecount desc;
    -->
    <!-- make a concept out of this:
        match (l:Linecount), (g:Git:File) where g.relativePath =~ ('.*'+l.name)
        with distinct g, l.linecount as linecount
        match (g)-(cf:Git:Commit:File)
        return g.relativePath, count(cf) as modifications, linecount
        order by modifications desc, linecount desc;
    -->

    <group id="default">
        <includeConcept refId="package:PackageLevel"/>
        <includeConcept refId="dependency:TransitivePackageDependencies"/>
        <includeConstraint refId="visibility:PublicMethodsOnlyCalledFromLocalPackage" severity="critical"/>
        <includeConstraint refId="dependency:WrongDirection" severity="critical"/>
        <!--
        <includeConstraint refId="debug:rule" severity="critical"/>
        -->
    </group>

</jqa:jqassistant-rules>
